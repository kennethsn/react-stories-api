import Typography from '@material-ui/core/Typography';
import PropTypes from 'prop-types';
import React, {
  ChangeEventHandler,
  FormEvent,
  ReactNode,
  useEffect,
  useState,
} from 'react';

import { Collection as APICollection, StoriesAPIStory } from '../../../types';
import Collection from '../../Collection';
import StoriesAPIClient from '../client';

export interface StoriesAPICollectionProps {
  apiKey?: string;
  data?: object;
  endpoint?: string;
  errorComponent?: ReactNode;
  id?: number;
  onChange?: (ctx: { page: number; q: string }) => void;
  onLoad?: (collection: APICollection) => void;
  options?: object;
  page?: number;
  q?: string;
  urlFormatter: string;
}

export interface StoriesAPIStoryListResponse {
  items: StoriesAPIStory[];
  last_page: number;
  page: number;
  q: string;
  total_count: number;
}

export interface TargetWithValue {
  value: string;
}

/**
* Collection generated by the Stories-API endpoint.
*/
const StoriesAPICollection = ({
  apiKey,
  data,
  endpoint,
  errorComponent,
  id,
  onChange,
  onLoad,
  options,
  page,
  q,
  urlFormatter,
}: StoriesAPICollectionProps) => {
  const [collectionLoading, setCollectionLoading] = useState(false);
  const [storiesLoading, setStoriesLoading] = useState(false);
  const [collectionData, setCollectionData] = useState(data as APICollection);
  const [storiesData, setStoriesData] = useState([] as StoriesAPIStory[]); // TODO: support as prop
  const [error, setError] = useState(false);
  const [search, setSearch] = useState(q); // Only set when hitting 'enter'
  const [userInput, setUserInput] = useState(q); // Tracks the search input before 'enter'
  const [currentPage, setCurrentPage] = useState(page);
  const [pageCount, setPageCount] = useState(undefined as number | undefined);
  const [storyCount, setStoryCount] = useState(undefined as number | undefined);
  const client = endpoint ? new StoriesAPIClient(endpoint, apiKey!) : undefined;
  const handleError = () => setError(true);
  const loading = collectionLoading || storiesLoading;
  const handleChange = () => {
    // Used for a public interface of capturing key events
    if (onChange) onChange({ page: currentPage!, q: search! });
  };

  const fetchCollection = () => {
    if (!client) {
      handleError();
      return;
    }
    setCollectionLoading(true);
    client.collection(
      `${id!}`,
      (apiData: APICollection) => {
        setCollectionData(apiData);
        if (onLoad) onLoad(apiData);
        setCollectionLoading(false);
      },
      handleError,
    ).then();
  };
  const fetchStories = () => {
    if (!client) {
      handleError();
      return;
    }
    setStoriesLoading(true);
    client.story(
      '',
      id!,
      currentPage,
      search,
      (res: StoriesAPIStoryListResponse) => {
        setStoriesData(res.items);
        setCurrentPage(res.page);
        setPageCount(res.last_page);
        setStoryCount(res.total_count);
        setSearch(res.q);
        handleChange();
        setStoriesLoading(false);
      },
      handleError,
    ).then();
  };
  useEffect(() => {
    if (data || collectionData || collectionLoading) return;
    fetchCollection();
  }, [collectionData]);
  useEffect(() => {
    if (storiesLoading) return;
    fetchStories();
  }, [storiesData, currentPage, search]);
  const handlePageChange = ({ selected }: { selected: number }) => {
    const newPage = selected + 1;
    if (newPage === currentPage) return;
    setCurrentPage(newPage);
  };

  const handleSearchInput: ChangeEventHandler = (event) => setUserInput(
    (event?.target as unknown as TargetWithValue).value,
  );

  const handleSearch = (event: FormEvent) => {
    event.preventDefault(); // prevent form from reloading page
    setCurrentPage(1);
    setSearch(userInput);
  };

  const renderError = () => errorComponent || (
    <Typography>
      Something went wrong while loading this collection...
      <br />
      Try Refreshing or Check Back Soon
    </Typography>
  );
  /* eslint-disable react/jsx-props-no-spreading */
  return (error ? renderError() : (
    <Collection
      loading={loading}
      stories={storiesData}
      {...collectionData}
      count={storyCount || 0}
      page={currentPage || 0}
      pageCount={pageCount || 0}
      onPageChange={handlePageChange}
      search={userInput}
      q={q}
      onSearch={handleSearch}
      onSearchInput={handleSearchInput}
      urlFormatter={urlFormatter}
      {...options}
    />
  )) as JSX.Element;
};

StoriesAPICollection.propTypes = {
  /** API Key to interact with the StoriesAPI */
  apiKey: PropTypes.string.isRequired,
  /** Override `StoriesAPI` data fetching to use custom data */
  // eslint-disable-next-line react/forbid-prop-types
  data: PropTypes.object,
  /** `StoriesAPI` endpoint URL */
  endpoint: PropTypes.string,
  /** StoriesAPI collection id */
  id: PropTypes.number.isRequired,
  /** Props to pass to the `Story` component */
  // eslint-disable-next-line react/forbid-prop-types
  options: PropTypes.object,
  /** Current Browsing Page Number */
  page: PropTypes.number,
};

StoriesAPICollection.defaultProps = {
  data: undefined,
  endpoint: undefined,
  options: {},
  page: 1,
};

export default StoriesAPICollection;
